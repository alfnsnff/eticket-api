// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"eticket-api/config"
	controller2 "eticket-api/internal/delivery/http/controller"
	"eticket-api/internal/delivery/http/controller/auth"
	repository2 "eticket-api/internal/repository"
	"eticket-api/internal/repository/auth"
	usecase2 "eticket-api/internal/usecase"
	"eticket-api/internal/usecase/auth"
	"eticket-api/pkg/db/postgres"
	"eticket-api/pkg/jwt"
	"eticket-api/pkg/utils/tx"
)

// Injectors from wire.go:

func InitializeContainer(cfg *config.Config) (*Container, error) {
	db, err := postgres.New(cfg)
	if err != nil {
		return nil, err
	}
	tokenManager := jwt.NewTokenManager(cfg)
	authRepository := repository.NewAuthRepository()
	roleRepository := repository.NewRoleRepository()
	userRepository := repository.NewUserRepository()
	userRoleRepository := repository.NewUserRoleRepository()
	shipRepository := repository2.NewShipRepository()
	allocationRepository := repository2.NewAllocationRepository()
	manifestRepository := repository2.NewManifestRepository()
	ticketRepository := repository2.NewTicketRepository()
	fareRepository := repository2.NewFareRepository()
	scheduleRepository := repository2.NewScheduleRepository()
	bookingRepository := repository2.NewBookingRepository()
	sessionRepository := repository2.NewSessionRepository()
	routeRepository := repository2.NewRouteRepository()
	harborRepository := repository2.NewHarborRepository()
	classRepository := repository2.NewClassRepository()
	gormTxManager := tx.NewGormTxManager(db)
	authUsecase := usecase.NewAuthUsecase(gormTxManager, authRepository, userRepository, tokenManager)
	roleUsecase := usecase.NewRoleUsecase(gormTxManager, roleRepository)
	userUsecase := usecase.NewUserUsecase(gormTxManager, userRepository)
	userRoleUsecase := usecase.NewUserRoleUsecase(gormTxManager, roleRepository, userRepository, userRoleRepository)
	shipUsecase := usecase2.NewShipUsecase(gormTxManager, shipRepository)
	allocationUsecase := usecase2.NewAllocationUsecase(gormTxManager, allocationRepository, scheduleRepository, fareRepository)
	manifestUsecase := usecase2.NewManifestUsecase(gormTxManager, manifestRepository)
	ticketUsecase := usecase2.NewTicketUsecase(gormTxManager, ticketRepository, scheduleRepository, fareRepository, sessionRepository)
	fareUsecase := usecase2.NewFareUsecase(gormTxManager, fareRepository)
	scheduleUsecase := usecase2.NewScheduleUsecase(gormTxManager, allocationRepository, classRepository, fareRepository, manifestRepository, routeRepository, shipRepository, scheduleRepository, ticketRepository)
	bookingUsecase := usecase2.NewBookingUsecase(gormTxManager, bookingRepository, ticketRepository, sessionRepository)
	sessionUsecase := usecase2.NewSessionUsecase(gormTxManager, sessionRepository, ticketRepository, scheduleRepository, allocationRepository, manifestRepository, fareRepository)
	routeUsecase := usecase2.NewRouteUsecase(gormTxManager, routeRepository)
	harborUsecase := usecase2.NewHarborUsecase(gormTxManager, harborRepository)
	classUsecase := usecase2.NewClassUsecase(gormTxManager, classRepository)
	authController := controller.NewAuthController(cfg, tokenManager, authUsecase)
	roleController := controller.NewRoleController(roleUsecase)
	userController := controller.NewUserController(userUsecase)
	userRoleController := controller.NewUserRoleController(userRoleUsecase)
	shipController := controller2.NewShipController(shipUsecase)
	allocationController := controller2.NewAllocationController(allocationUsecase)
	manifestController := controller2.NewManifestController(manifestUsecase)
	ticketController := controller2.NewTicketController(ticketUsecase)
	fareController := controller2.NewFareController(fareUsecase)
	scheduleController := controller2.NewScheduleController(scheduleUsecase)
	bookingController := controller2.NewBookingController(bookingUsecase)
	sessionController := controller2.NewSessionController(sessionUsecase)
	routeController := controller2.NewRouteController(routeUsecase)
	harborController := controller2.NewHarborController(harborUsecase)
	classController := controller2.NewClassController(classUsecase)
	container := NewContainer(cfg, db, tokenManager, authRepository, roleRepository, userRepository, userRoleRepository, shipRepository, allocationRepository, manifestRepository, ticketRepository, fareRepository, scheduleRepository, bookingRepository, sessionRepository, routeRepository, harborRepository, classRepository, authUsecase, roleUsecase, userUsecase, userRoleUsecase, shipUsecase, allocationUsecase, manifestUsecase, ticketUsecase, fareUsecase, scheduleUsecase, bookingUsecase, sessionUsecase, routeUsecase, harborUsecase, classUsecase, authController, roleController, userController, userRoleController, shipController, allocationController, manifestController, ticketController, fareController, scheduleController, bookingController, sessionController, routeController, harborController, classController)
	return container, nil
}
