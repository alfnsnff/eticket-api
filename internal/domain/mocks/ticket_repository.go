// Code generated by MockGen. DO NOT EDIT.
// Source: c:\Users\alfns\Documents\College\SemesterVIII\TugasAkhir\eticket-api\internal\domain\ticket.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "eticket-api/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTicketRepository is a mock of TicketRepository interface.
type MockTicketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketRepositoryMockRecorder
}

// MockTicketRepositoryMockRecorder is the mock recorder for MockTicketRepository.
type MockTicketRepositoryMockRecorder struct {
	mock *MockTicketRepository
}

// NewMockTicketRepository creates a new mock instance.
func NewMockTicketRepository(ctrl *gomock.Controller) *MockTicketRepository {
	mock := &MockTicketRepository{ctrl: ctrl}
	mock.recorder = &MockTicketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketRepository) EXPECT() *MockTicketRepositoryMockRecorder {
	return m.recorder
}

// CheckIn mocks base method.
func (m *MockTicketRepository) CheckIn(db *gorm.DB, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIn", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIn indicates an expected call of CheckIn.
func (mr *MockTicketRepositoryMockRecorder) CheckIn(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIn", reflect.TypeOf((*MockTicketRepository)(nil).CheckIn), db, id)
}

// Count mocks base method.
func (m *MockTicketRepository) Count(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockTicketRepositoryMockRecorder) Count(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTicketRepository)(nil).Count), db)
}

// CountByScheduleID mocks base method.
func (m *MockTicketRepository) CountByScheduleID(db *gorm.DB, scheduleID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByScheduleID", db, scheduleID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByScheduleID indicates an expected call of CountByScheduleID.
func (mr *MockTicketRepositoryMockRecorder) CountByScheduleID(db, scheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByScheduleID", reflect.TypeOf((*MockTicketRepository)(nil).CountByScheduleID), db, scheduleID)
}

// CountByScheduleIDAndClassIDWithStatus mocks base method.
func (m *MockTicketRepository) CountByScheduleIDAndClassIDWithStatus(db *gorm.DB, scheduleID, classID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByScheduleIDAndClassIDWithStatus", db, scheduleID, classID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByScheduleIDAndClassIDWithStatus indicates an expected call of CountByScheduleIDAndClassIDWithStatus.
func (mr *MockTicketRepositoryMockRecorder) CountByScheduleIDAndClassIDWithStatus(db, scheduleID, classID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByScheduleIDAndClassIDWithStatus", reflect.TypeOf((*MockTicketRepository)(nil).CountByScheduleIDAndClassIDWithStatus), db, scheduleID, classID)
}

// Delete mocks base method.
func (m *MockTicketRepository) Delete(db *gorm.DB, entity *domain.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTicketRepositoryMockRecorder) Delete(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTicketRepository)(nil).Delete), db, entity)
}

// FindAll mocks base method.
func (m *MockTicketRepository) FindAll(db *gorm.DB, limit, offset int, sort, search string) ([]*domain.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", db, limit, offset, sort, search)
	ret0, _ := ret[0].([]*domain.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTicketRepositoryMockRecorder) FindAll(db, limit, offset, sort, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTicketRepository)(nil).FindAll), db, limit, offset, sort, search)
}

// FindByBookingID mocks base method.
func (m *MockTicketRepository) FindByBookingID(db *gorm.DB, bookingID uint) ([]*domain.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBookingID", db, bookingID)
	ret0, _ := ret[0].([]*domain.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBookingID indicates an expected call of FindByBookingID.
func (mr *MockTicketRepositoryMockRecorder) FindByBookingID(db, bookingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBookingID", reflect.TypeOf((*MockTicketRepository)(nil).FindByBookingID), db, bookingID)
}

// FindByClaimSessionID mocks base method.
func (m *MockTicketRepository) FindByClaimSessionID(db *gorm.DB, sessionID uint) ([]*domain.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByClaimSessionID", db, sessionID)
	ret0, _ := ret[0].([]*domain.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByClaimSessionID indicates an expected call of FindByClaimSessionID.
func (mr *MockTicketRepositoryMockRecorder) FindByClaimSessionID(db, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByClaimSessionID", reflect.TypeOf((*MockTicketRepository)(nil).FindByClaimSessionID), db, sessionID)
}

// FindByID mocks base method.
func (m *MockTicketRepository) FindByID(db *gorm.DB, id uint) (*domain.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", db, id)
	ret0, _ := ret[0].(*domain.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTicketRepositoryMockRecorder) FindByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTicketRepository)(nil).FindByID), db, id)
}

// FindByIDs mocks base method.
func (m *MockTicketRepository) FindByIDs(db *gorm.DB, ids []uint) ([]*domain.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", db, ids)
	ret0, _ := ret[0].([]*domain.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockTicketRepositoryMockRecorder) FindByIDs(db, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockTicketRepository)(nil).FindByIDs), db, ids)
}

// FindByScheduleID mocks base method.
func (m *MockTicketRepository) FindByScheduleID(db *gorm.DB, scheduleID uint) ([]*domain.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByScheduleID", db, scheduleID)
	ret0, _ := ret[0].([]*domain.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByScheduleID indicates an expected call of FindByScheduleID.
func (mr *MockTicketRepositoryMockRecorder) FindByScheduleID(db, scheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByScheduleID", reflect.TypeOf((*MockTicketRepository)(nil).FindByScheduleID), db, scheduleID)
}

// Insert mocks base method.
func (m *MockTicketRepository) Insert(db *gorm.DB, entity *domain.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTicketRepositoryMockRecorder) Insert(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTicketRepository)(nil).Insert), db, entity)
}

// InsertBulk mocks base method.
func (m *MockTicketRepository) InsertBulk(db *gorm.DB, tickets []*domain.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBulk", db, tickets)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBulk indicates an expected call of InsertBulk.
func (mr *MockTicketRepositoryMockRecorder) InsertBulk(db, tickets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBulk", reflect.TypeOf((*MockTicketRepository)(nil).InsertBulk), db, tickets)
}

// Update mocks base method.
func (m *MockTicketRepository) Update(db *gorm.DB, entity *domain.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTicketRepositoryMockRecorder) Update(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTicketRepository)(nil).Update), db, entity)
}

// UpdateBulk mocks base method.
func (m *MockTicketRepository) UpdateBulk(db *gorm.DB, tickets []*domain.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBulk", db, tickets)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBulk indicates an expected call of UpdateBulk.
func (mr *MockTicketRepositoryMockRecorder) UpdateBulk(db, tickets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBulk", reflect.TypeOf((*MockTicketRepository)(nil).UpdateBulk), db, tickets)
}
