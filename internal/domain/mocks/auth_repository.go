// Code generated by MockGen. DO NOT EDIT.
// Source: c:\Users\alfns\Documents\College\SemesterVIII\TugasAkhir\eticket-api\internal\domain\auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "eticket-api/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	gorm "gorm.io/gorm"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CountPasswordResets mocks base method.
func (m *MockAuthRepository) CountPasswordResets(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPasswordResets", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPasswordResets indicates an expected call of CountPasswordResets.
func (mr *MockAuthRepositoryMockRecorder) CountPasswordResets(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPasswordResets", reflect.TypeOf((*MockAuthRepository)(nil).CountPasswordResets), db)
}

// CountRefreshTokens mocks base method.
func (m *MockAuthRepository) CountRefreshTokens(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefreshTokens", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRefreshTokens indicates an expected call of CountRefreshTokens.
func (mr *MockAuthRepositoryMockRecorder) CountRefreshTokens(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefreshTokens", reflect.TypeOf((*MockAuthRepository)(nil).CountRefreshTokens), db)
}

// DeletePasswordReset mocks base method.
func (m *MockAuthRepository) DeletePasswordReset(db *gorm.DB, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasswordReset", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasswordReset indicates an expected call of DeletePasswordReset.
func (mr *MockAuthRepositoryMockRecorder) DeletePasswordReset(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasswordReset", reflect.TypeOf((*MockAuthRepository)(nil).DeletePasswordReset), db, id)
}

// DeleteRefreshTokens mocks base method.
func (m *MockAuthRepository) DeleteRefreshTokens(db *gorm.DB, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokens", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokens indicates an expected call of DeleteRefreshTokens.
func (mr *MockAuthRepositoryMockRecorder) DeleteRefreshTokens(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokens", reflect.TypeOf((*MockAuthRepository)(nil).DeleteRefreshTokens), db, id)
}

// FindAllPasswordResets mocks base method.
func (m *MockAuthRepository) FindAllPasswordResets(db *gorm.DB, limit, offset int, sort, search string) ([]*domain.PasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPasswordResets", db, limit, offset, sort, search)
	ret0, _ := ret[0].([]*domain.PasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPasswordResets indicates an expected call of FindAllPasswordResets.
func (mr *MockAuthRepositoryMockRecorder) FindAllPasswordResets(db, limit, offset, sort, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPasswordResets", reflect.TypeOf((*MockAuthRepository)(nil).FindAllPasswordResets), db, limit, offset, sort, search)
}

// FindAllRefreshTokens mocks base method.
func (m *MockAuthRepository) FindAllRefreshTokens(db *gorm.DB, limit, offset int, sort, search string) ([]*domain.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRefreshTokens", db, limit, offset, sort, search)
	ret0, _ := ret[0].([]*domain.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRefreshTokens indicates an expected call of FindAllRefreshTokens.
func (mr *MockAuthRepositoryMockRecorder) FindAllRefreshTokens(db, limit, offset, sort, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRefreshTokens", reflect.TypeOf((*MockAuthRepository)(nil).FindAllRefreshTokens), db, limit, offset, sort, search)
}

// FindPasswordResetByID mocks base method.
func (m *MockAuthRepository) FindPasswordResetByID(db *gorm.DB, id string) (*domain.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPasswordResetByID", db, id)
	ret0, _ := ret[0].(*domain.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPasswordResetByID indicates an expected call of FindPasswordResetByID.
func (mr *MockAuthRepositoryMockRecorder) FindPasswordResetByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPasswordResetByID", reflect.TypeOf((*MockAuthRepository)(nil).FindPasswordResetByID), db, id)
}

// FindPasswordResetByTokenAndStatus mocks base method.
func (m *MockAuthRepository) FindPasswordResetByTokenAndStatus(db *gorm.DB, token string, status bool) (*domain.PasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPasswordResetByTokenAndStatus", db, token, status)
	ret0, _ := ret[0].(*domain.PasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPasswordResetByTokenAndStatus indicates an expected call of FindPasswordResetByTokenAndStatus.
func (mr *MockAuthRepositoryMockRecorder) FindPasswordResetByTokenAndStatus(db, token, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPasswordResetByTokenAndStatus", reflect.TypeOf((*MockAuthRepository)(nil).FindPasswordResetByTokenAndStatus), db, token, status)
}

// FindRefreshTokenByID mocks base method.
func (m *MockAuthRepository) FindRefreshTokenByID(db *gorm.DB, id string) (*domain.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRefreshTokenByID", db, id)
	ret0, _ := ret[0].(*domain.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRefreshTokenByID indicates an expected call of FindRefreshTokenByID.
func (mr *MockAuthRepositoryMockRecorder) FindRefreshTokenByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRefreshTokenByID", reflect.TypeOf((*MockAuthRepository)(nil).FindRefreshTokenByID), db, id)
}

// FindRefreshTokenByIDAndStatus mocks base method.
func (m *MockAuthRepository) FindRefreshTokenByIDAndStatus(db *gorm.DB, id string, status bool) (*domain.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRefreshTokenByIDAndStatus", db, id, status)
	ret0, _ := ret[0].(*domain.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRefreshTokenByIDAndStatus indicates an expected call of FindRefreshTokenByIDAndStatus.
func (mr *MockAuthRepositoryMockRecorder) FindRefreshTokenByIDAndStatus(db, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRefreshTokenByIDAndStatus", reflect.TypeOf((*MockAuthRepository)(nil).FindRefreshTokenByIDAndStatus), db, id, status)
}

// InsertPasswordReset mocks base method.
func (m *MockAuthRepository) InsertPasswordReset(db *gorm.DB, passwordReset *domain.PasswordReset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPasswordReset", db, passwordReset)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPasswordReset indicates an expected call of InsertPasswordReset.
func (mr *MockAuthRepositoryMockRecorder) InsertPasswordReset(db, passwordReset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPasswordReset", reflect.TypeOf((*MockAuthRepository)(nil).InsertPasswordReset), db, passwordReset)
}

// InsertPasswordResetBulk mocks base method.
func (m *MockAuthRepository) InsertPasswordResetBulk(db *gorm.DB, passwordResets []*domain.PasswordReset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPasswordResetBulk", db, passwordResets)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPasswordResetBulk indicates an expected call of InsertPasswordResetBulk.
func (mr *MockAuthRepositoryMockRecorder) InsertPasswordResetBulk(db, passwordResets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPasswordResetBulk", reflect.TypeOf((*MockAuthRepository)(nil).InsertPasswordResetBulk), db, passwordResets)
}

// InsertRefreshToken mocks base method.
func (m *MockAuthRepository) InsertRefreshToken(db *gorm.DB, refreshToken *domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRefreshToken", db, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRefreshToken indicates an expected call of InsertRefreshToken.
func (mr *MockAuthRepositoryMockRecorder) InsertRefreshToken(db, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRefreshToken", reflect.TypeOf((*MockAuthRepository)(nil).InsertRefreshToken), db, refreshToken)
}

// InsertRefreshTokenBulk mocks base method.
func (m *MockAuthRepository) InsertRefreshTokenBulk(db *gorm.DB, refreshTokens []*domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRefreshTokenBulk", db, refreshTokens)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRefreshTokenBulk indicates an expected call of InsertRefreshTokenBulk.
func (mr *MockAuthRepositoryMockRecorder) InsertRefreshTokenBulk(db, refreshTokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRefreshTokenBulk", reflect.TypeOf((*MockAuthRepository)(nil).InsertRefreshTokenBulk), db, refreshTokens)
}

// RevokePasswordResetByToken mocks base method.
func (m *MockAuthRepository) RevokePasswordResetByToken(db *gorm.DB, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePasswordResetByToken", db, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokePasswordResetByToken indicates an expected call of RevokePasswordResetByToken.
func (mr *MockAuthRepositoryMockRecorder) RevokePasswordResetByToken(db, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePasswordResetByToken", reflect.TypeOf((*MockAuthRepository)(nil).RevokePasswordResetByToken), db, token)
}

// RevokeRefreshTokenByID mocks base method.
func (m *MockAuthRepository) RevokeRefreshTokenByID(db *gorm.DB, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshTokenByID", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshTokenByID indicates an expected call of RevokeRefreshTokenByID.
func (mr *MockAuthRepositoryMockRecorder) RevokeRefreshTokenByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshTokenByID", reflect.TypeOf((*MockAuthRepository)(nil).RevokeRefreshTokenByID), db, id)
}

// UpdatePasswordReset mocks base method.
func (m *MockAuthRepository) UpdatePasswordReset(db *gorm.DB, passwordReset *domain.PasswordReset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordReset", db, passwordReset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordReset indicates an expected call of UpdatePasswordReset.
func (mr *MockAuthRepositoryMockRecorder) UpdatePasswordReset(db, passwordReset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordReset", reflect.TypeOf((*MockAuthRepository)(nil).UpdatePasswordReset), db, passwordReset)
}

// UpdatePasswordResetBulk mocks base method.
func (m *MockAuthRepository) UpdatePasswordResetBulk(db *gorm.DB, passwordResets []*domain.PasswordReset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordResetBulk", db, passwordResets)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordResetBulk indicates an expected call of UpdatePasswordResetBulk.
func (mr *MockAuthRepositoryMockRecorder) UpdatePasswordResetBulk(db, passwordResets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordResetBulk", reflect.TypeOf((*MockAuthRepository)(nil).UpdatePasswordResetBulk), db, passwordResets)
}

// UpdateRefreshToken mocks base method.
func (m *MockAuthRepository) UpdateRefreshToken(db *gorm.DB, refreshToken *domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", db, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockAuthRepositoryMockRecorder) UpdateRefreshToken(db, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockAuthRepository)(nil).UpdateRefreshToken), db, refreshToken)
}

// UpdateRefreshTokenBulk mocks base method.
func (m *MockAuthRepository) UpdateRefreshTokenBulk(db *gorm.DB, refreshTokens []*domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshTokenBulk", db, refreshTokens)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRefreshTokenBulk indicates an expected call of UpdateRefreshTokenBulk.
func (mr *MockAuthRepositoryMockRecorder) UpdateRefreshTokenBulk(db, refreshTokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshTokenBulk", reflect.TypeOf((*MockAuthRepository)(nil).UpdateRefreshTokenBulk), db, refreshTokens)
}

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}
