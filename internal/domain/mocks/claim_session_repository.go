// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/claim_session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "eticket-api/internal/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockClaimSessionRepository is a mock of ClaimSessionRepository interface.
type MockClaimSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClaimSessionRepositoryMockRecorder
}

// MockClaimSessionRepositoryMockRecorder is the mock recorder for MockClaimSessionRepository.
type MockClaimSessionRepositoryMockRecorder struct {
	mock *MockClaimSessionRepository
}

// NewMockClaimSessionRepository creates a new mock instance.
func NewMockClaimSessionRepository(ctrl *gomock.Controller) *MockClaimSessionRepository {
	mock := &MockClaimSessionRepository{ctrl: ctrl}
	mock.recorder = &MockClaimSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimSessionRepository) EXPECT() *MockClaimSessionRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockClaimSessionRepository) Count(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockClaimSessionRepositoryMockRecorder) Count(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockClaimSessionRepository)(nil).Count), db)
}

// Delete mocks base method.
func (m *MockClaimSessionRepository) Delete(db *gorm.DB, entity *domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClaimSessionRepositoryMockRecorder) Delete(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClaimSessionRepository)(nil).Delete), db, entity)
}

// FindAll mocks base method.
func (m *MockClaimSessionRepository) FindAll(db *gorm.DB, limit, offset int, sort, search string) ([]*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", db, limit, offset, sort, search)
	ret0, _ := ret[0].([]*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockClaimSessionRepositoryMockRecorder) FindAll(db, limit, offset, sort, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindAll), db, limit, offset, sort, search)
}

// FindByID mocks base method.
func (m *MockClaimSessionRepository) FindByID(db *gorm.DB, id uint) (*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", db, id)
	ret0, _ := ret[0].(*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockClaimSessionRepositoryMockRecorder) FindByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindByID), db, id)
}

// FindBySessionID mocks base method.
func (m *MockClaimSessionRepository) FindBySessionID(db *gorm.DB, uuid string) (*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySessionID", db, uuid)
	ret0, _ := ret[0].(*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySessionID indicates an expected call of FindBySessionID.
func (mr *MockClaimSessionRepositoryMockRecorder) FindBySessionID(db, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySessionID", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindBySessionID), db, uuid)
}

// FindExpired mocks base method.
func (m *MockClaimSessionRepository) FindExpired(db *gorm.DB, expiryTime time.Time, limit int) ([]*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExpired", db, expiryTime, limit)
	ret0, _ := ret[0].([]*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExpired indicates an expected call of FindExpired.
func (mr *MockClaimSessionRepositoryMockRecorder) FindExpired(db, expiryTime, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExpired", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindExpired), db, expiryTime, limit)
}

// Insert mocks base method.
func (m *MockClaimSessionRepository) Insert(db *gorm.DB, entity *domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockClaimSessionRepositoryMockRecorder) Insert(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockClaimSessionRepository)(nil).Insert), db, entity)
}

// InsertBulk mocks base method.
func (m *MockClaimSessionRepository) InsertBulk(db *gorm.DB, sessions []*domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBulk", db, sessions)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBulk indicates an expected call of InsertBulk.
func (mr *MockClaimSessionRepositoryMockRecorder) InsertBulk(db, sessions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBulk", reflect.TypeOf((*MockClaimSessionRepository)(nil).InsertBulk), db, sessions)
}

// Update mocks base method.
func (m *MockClaimSessionRepository) Update(db *gorm.DB, entity *domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClaimSessionRepositoryMockRecorder) Update(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClaimSessionRepository)(nil).Update), db, entity)
}

// UpdateBulk mocks base method.
func (m *MockClaimSessionRepository) UpdateBulk(db *gorm.DB, sessions []*domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBulk", db, sessions)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBulk indicates an expected call of UpdateBulk.
func (mr *MockClaimSessionRepositoryMockRecorder) UpdateBulk(db, sessions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBulk", reflect.TypeOf((*MockClaimSessionRepository)(nil).UpdateBulk), db, sessions)
}
