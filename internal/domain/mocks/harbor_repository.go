// Code generated by MockGen. DO NOT EDIT.
// Source: c:\Users\alfns\Documents\College\SemesterVIII\TugasAkhir\eticket-api\internal\domain\harbor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "eticket-api/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockHarborRepository is a mock of HarborRepository interface.
type MockHarborRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHarborRepositoryMockRecorder
}

// MockHarborRepositoryMockRecorder is the mock recorder for MockHarborRepository.
type MockHarborRepositoryMockRecorder struct {
	mock *MockHarborRepository
}

// NewMockHarborRepository creates a new mock instance.
func NewMockHarborRepository(ctrl *gomock.Controller) *MockHarborRepository {
	mock := &MockHarborRepository{ctrl: ctrl}
	mock.recorder = &MockHarborRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHarborRepository) EXPECT() *MockHarborRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockHarborRepository) Count(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockHarborRepositoryMockRecorder) Count(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockHarborRepository)(nil).Count), db)
}

// Delete mocks base method.
func (m *MockHarborRepository) Delete(db *gorm.DB, entity *domain.Harbor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHarborRepositoryMockRecorder) Delete(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHarborRepository)(nil).Delete), db, entity)
}

// FindAll mocks base method.
func (m *MockHarborRepository) FindAll(db *gorm.DB, limit, offset int, sort, search string) ([]*domain.Harbor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", db, limit, offset, sort, search)
	ret0, _ := ret[0].([]*domain.Harbor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockHarborRepositoryMockRecorder) FindAll(db, limit, offset, sort, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockHarborRepository)(nil).FindAll), db, limit, offset, sort, search)
}

// FindByID mocks base method.
func (m *MockHarborRepository) FindByID(db *gorm.DB, id uint) (*domain.Harbor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", db, id)
	ret0, _ := ret[0].(*domain.Harbor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockHarborRepositoryMockRecorder) FindByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockHarborRepository)(nil).FindByID), db, id)
}

// Insert mocks base method.
func (m *MockHarborRepository) Insert(db *gorm.DB, entity *domain.Harbor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockHarborRepositoryMockRecorder) Insert(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockHarborRepository)(nil).Insert), db, entity)
}

// InsertBulk mocks base method.
func (m *MockHarborRepository) InsertBulk(db *gorm.DB, harbors []*domain.Harbor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBulk", db, harbors)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBulk indicates an expected call of InsertBulk.
func (mr *MockHarborRepositoryMockRecorder) InsertBulk(db, harbors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBulk", reflect.TypeOf((*MockHarborRepository)(nil).InsertBulk), db, harbors)
}

// Update mocks base method.
func (m *MockHarborRepository) Update(db *gorm.DB, entity *domain.Harbor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHarborRepositoryMockRecorder) Update(db, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHarborRepository)(nil).Update), db, entity)
}

// UpdateBulk mocks base method.
func (m *MockHarborRepository) UpdateBulk(db *gorm.DB, harbors []*domain.Harbor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBulk", db, harbors)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBulk indicates an expected call of UpdateBulk.
func (mr *MockHarborRepositoryMockRecorder) UpdateBulk(db, harbors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBulk", reflect.TypeOf((*MockHarborRepository)(nil).UpdateBulk), db, harbors)
}
