// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/claim_session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "eticket-api/internal/domain"
	gotann "eticket-api/pkg/gotann"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClaimSessionRepository is a mock of ClaimSessionRepository interface.
type MockClaimSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClaimSessionRepositoryMockRecorder
}

// MockClaimSessionRepositoryMockRecorder is the mock recorder for MockClaimSessionRepository.
type MockClaimSessionRepositoryMockRecorder struct {
	mock *MockClaimSessionRepository
}

// NewMockClaimSessionRepository creates a new mock instance.
func NewMockClaimSessionRepository(ctrl *gomock.Controller) *MockClaimSessionRepository {
	mock := &MockClaimSessionRepository{ctrl: ctrl}
	mock.recorder = &MockClaimSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimSessionRepository) EXPECT() *MockClaimSessionRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockClaimSessionRepository) Count(ctx context.Context, conn gotann.Connection) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, conn)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockClaimSessionRepositoryMockRecorder) Count(ctx, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockClaimSessionRepository)(nil).Count), ctx, conn)
}

// Delete mocks base method.
func (m *MockClaimSessionRepository) Delete(ctx context.Context, conn gotann.Connection, entity *domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, conn, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClaimSessionRepositoryMockRecorder) Delete(ctx, conn, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClaimSessionRepository)(nil).Delete), ctx, conn, entity)
}

// DeleteBulk mocks base method.
func (m *MockClaimSessionRepository) DeleteBulk(ctx context.Context, conn gotann.Connection, entity []*domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBulk", ctx, conn, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBulk indicates an expected call of DeleteBulk.
func (mr *MockClaimSessionRepositoryMockRecorder) DeleteBulk(ctx, conn, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBulk", reflect.TypeOf((*MockClaimSessionRepository)(nil).DeleteBulk), ctx, conn, entity)
}

// FindActiveByScheduleID mocks base method.
func (m *MockClaimSessionRepository) FindActiveByScheduleID(ctx context.Context, conn gotann.Connection, scheduleID uint) ([]*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveByScheduleID", ctx, conn, scheduleID)
	ret0, _ := ret[0].([]*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveByScheduleID indicates an expected call of FindActiveByScheduleID.
func (mr *MockClaimSessionRepositoryMockRecorder) FindActiveByScheduleID(ctx, conn, scheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveByScheduleID", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindActiveByScheduleID), ctx, conn, scheduleID)
}

// FindAll mocks base method.
func (m *MockClaimSessionRepository) FindAll(ctx context.Context, conn gotann.Connection, limit, offset int, sort, search string) ([]*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, conn, limit, offset, sort, search)
	ret0, _ := ret[0].([]*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockClaimSessionRepositoryMockRecorder) FindAll(ctx, conn, limit, offset, sort, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindAll), ctx, conn, limit, offset, sort, search)
}

// FindByID mocks base method.
func (m *MockClaimSessionRepository) FindByID(ctx context.Context, conn gotann.Connection, id uint) (*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, conn, id)
	ret0, _ := ret[0].(*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockClaimSessionRepositoryMockRecorder) FindByID(ctx, conn, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindByID), ctx, conn, id)
}

// FindBySessionID mocks base method.
func (m *MockClaimSessionRepository) FindBySessionID(ctx context.Context, conn gotann.Connection, uuid string) (*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySessionID", ctx, conn, uuid)
	ret0, _ := ret[0].(*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySessionID indicates an expected call of FindBySessionID.
func (mr *MockClaimSessionRepositoryMockRecorder) FindBySessionID(ctx, conn, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySessionID", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindBySessionID), ctx, conn, uuid)
}

// FindExpired mocks base method.
func (m *MockClaimSessionRepository) FindExpired(ctx context.Context, conn gotann.Connection, limit int) ([]*domain.ClaimSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExpired", ctx, conn, limit)
	ret0, _ := ret[0].([]*domain.ClaimSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExpired indicates an expected call of FindExpired.
func (mr *MockClaimSessionRepositoryMockRecorder) FindExpired(ctx, conn, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExpired", reflect.TypeOf((*MockClaimSessionRepository)(nil).FindExpired), ctx, conn, limit)
}

// Insert mocks base method.
func (m *MockClaimSessionRepository) Insert(ctx context.Context, conn gotann.Connection, entity *domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, conn, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockClaimSessionRepositoryMockRecorder) Insert(ctx, conn, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockClaimSessionRepository)(nil).Insert), ctx, conn, entity)
}

// InsertBulk mocks base method.
func (m *MockClaimSessionRepository) InsertBulk(ctx context.Context, conn gotann.Connection, sessions []*domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBulk", ctx, conn, sessions)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBulk indicates an expected call of InsertBulk.
func (mr *MockClaimSessionRepositoryMockRecorder) InsertBulk(ctx, conn, sessions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBulk", reflect.TypeOf((*MockClaimSessionRepository)(nil).InsertBulk), ctx, conn, sessions)
}

// Update mocks base method.
func (m *MockClaimSessionRepository) Update(ctx context.Context, conn gotann.Connection, entity *domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, conn, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClaimSessionRepositoryMockRecorder) Update(ctx, conn, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClaimSessionRepository)(nil).Update), ctx, conn, entity)
}

// UpdateBulk mocks base method.
func (m *MockClaimSessionRepository) UpdateBulk(ctx context.Context, conn gotann.Connection, sessions []*domain.ClaimSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBulk", ctx, conn, sessions)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBulk indicates an expected call of UpdateBulk.
func (mr *MockClaimSessionRepositoryMockRecorder) UpdateBulk(ctx, conn, sessions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBulk", reflect.TypeOf((*MockClaimSessionRepository)(nil).UpdateBulk), ctx, conn, sessions)
}
