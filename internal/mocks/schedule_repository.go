// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/schedule.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "eticket-api/internal/domain"
	gotann "eticket-api/pkg/gotann"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduleRepository is a mock of ScheduleRepository interface.
type MockScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleRepositoryMockRecorder
}

// MockScheduleRepositoryMockRecorder is the mock recorder for MockScheduleRepository.
type MockScheduleRepositoryMockRecorder struct {
	mock *MockScheduleRepository
}

// NewMockScheduleRepository creates a new mock instance.
func NewMockScheduleRepository(ctrl *gomock.Controller) *MockScheduleRepository {
	mock := &MockScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleRepository) EXPECT() *MockScheduleRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockScheduleRepository) Count(ctx context.Context, conn gotann.Connection) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, conn)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockScheduleRepositoryMockRecorder) Count(ctx, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockScheduleRepository)(nil).Count), ctx, conn)
}

// Delete mocks base method.
func (m *MockScheduleRepository) Delete(ctx context.Context, conn gotann.Connection, entity *domain.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, conn, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScheduleRepositoryMockRecorder) Delete(ctx, conn, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScheduleRepository)(nil).Delete), ctx, conn, entity)
}

// FindActiveSchedules mocks base method.
func (m *MockScheduleRepository) FindActiveSchedules(ctx context.Context, conn gotann.Connection) ([]*domain.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveSchedules", ctx, conn)
	ret0, _ := ret[0].([]*domain.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveSchedules indicates an expected call of FindActiveSchedules.
func (mr *MockScheduleRepositoryMockRecorder) FindActiveSchedules(ctx, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveSchedules", reflect.TypeOf((*MockScheduleRepository)(nil).FindActiveSchedules), ctx, conn)
}

// FindAll mocks base method.
func (m *MockScheduleRepository) FindAll(ctx context.Context, conn gotann.Connection, limit, offset int, sort, search string) ([]*domain.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, conn, limit, offset, sort, search)
	ret0, _ := ret[0].([]*domain.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockScheduleRepositoryMockRecorder) FindAll(ctx, conn, limit, offset, sort, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockScheduleRepository)(nil).FindAll), ctx, conn, limit, offset, sort, search)
}

// FindByID mocks base method.
func (m *MockScheduleRepository) FindByID(ctx context.Context, conn gotann.Connection, id uint) (*domain.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, conn, id)
	ret0, _ := ret[0].(*domain.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockScheduleRepositoryMockRecorder) FindByID(ctx, conn, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockScheduleRepository)(nil).FindByID), ctx, conn, id)
}

// Insert mocks base method.
func (m *MockScheduleRepository) Insert(ctx context.Context, conn gotann.Connection, entity *domain.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, conn, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockScheduleRepositoryMockRecorder) Insert(ctx, conn, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockScheduleRepository)(nil).Insert), ctx, conn, entity)
}

// InsertBulk mocks base method.
func (m *MockScheduleRepository) InsertBulk(ctx context.Context, conn gotann.Connection, schedules []*domain.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBulk", ctx, conn, schedules)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBulk indicates an expected call of InsertBulk.
func (mr *MockScheduleRepositoryMockRecorder) InsertBulk(ctx, conn, schedules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBulk", reflect.TypeOf((*MockScheduleRepository)(nil).InsertBulk), ctx, conn, schedules)
}

// Update mocks base method.
func (m *MockScheduleRepository) Update(ctx context.Context, conn gotann.Connection, entity *domain.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, conn, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScheduleRepositoryMockRecorder) Update(ctx, conn, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScheduleRepository)(nil).Update), ctx, conn, entity)
}

// UpdateBulk mocks base method.
func (m *MockScheduleRepository) UpdateBulk(ctx context.Context, conn gotann.Connection, schedules []*domain.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBulk", ctx, conn, schedules)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBulk indicates an expected call of UpdateBulk.
func (mr *MockScheduleRepositoryMockRecorder) UpdateBulk(ctx, conn, schedules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBulk", reflect.TypeOf((*MockScheduleRepository)(nil).UpdateBulk), ctx, conn, schedules)
}
