// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/transact/transactor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gotann "eticket-api/pkg/gotann"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTransactor) Execute(ctx context.Context, fn func(gotann.Transaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockTransactorMockRecorder) Execute(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTransactor)(nil).Execute), ctx, fn)
}

// ExecuteReadOnly mocks base method.
func (m *MockTransactor) ExecuteReadOnly(ctx context.Context, fn func(gotann.Transaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteReadOnly", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteReadOnly indicates an expected call of ExecuteReadOnly.
func (mr *MockTransactorMockRecorder) ExecuteReadOnly(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteReadOnly", reflect.TypeOf((*MockTransactor)(nil).ExecuteReadOnly), ctx, fn)
}

// ExecuteWithRetry mocks base method.
func (m *MockTransactor) ExecuteWithRetry(ctx context.Context, fn func(gotann.Transaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWithRetry", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteWithRetry indicates an expected call of ExecuteWithRetry.
func (mr *MockTransactorMockRecorder) ExecuteWithRetry(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithRetry", reflect.TypeOf((*MockTransactor)(nil).ExecuteWithRetry), ctx, fn)
}
