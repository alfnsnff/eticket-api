name: Deploy GO

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted

    steps:
      - name: Create .env file
        run: |
          cat <<EOF > .env
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          PORT=${{ secrets.PORT }}
          ACCESS_TOKEN_EXPIRY=${{ secrets.ACCESS_TOKEN_EXPIRY }}
          REFRESH_TOKEN_EXPIRY=${{ secrets.REFRESH_TOKEN_EXPIRY }}
          TRIPAY_API_KEY=${{ secrets.TRIPAY_API_KEY }}
          TRIPAY_PRIVATE_API_KEY=${{ secrets.TRIPAY_PRIVATE_API_KEY }}
          TRIPAY_MERCHANT_CODE=${{ secrets.TRIPAY_MERCHANT_CODE }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_SSLMODE=${{ secrets.DATABASE_SSLMODE }}
          MAILER_HOST=${{ secrets.MAILER_HOST }}
          MAILER_PORT=${{ secrets.MAILER_PORT }}
          MAILER_USERNAME=${{ secrets.MAILER_USERNAME }}
          MAILER_PASSWORD=${{ secrets.MAILER_PASSWORD }}
          MAILER_FROM=${{ secrets.MAILER_FROM }}
          EOF

      - name: Login to GHCR and pull image
        run: |
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
          docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/myapp:latest

      - name: Stop and remove existing container
        run: |
          docker stop myapp || true
          docker rm myapp || true

      - name: Ensure Docker network exists
        run: |
          docker network inspect tikethebat >/dev/null 2>&1 || docker network create tikethebat

      - name: Run new container
        run: |
          docker run -d \
            --add-host=host.docker.internal:host-gateway \
            --name myapp \
            --restart unless-stopped \
            --network tikethebat \
            --env-file .env \
            -p 8080:80 \
            ghcr.io/${{ secrets.GHCR_USERNAME }}/myapp:${{ github.sha }}
          
          docker network connect monitoring myapp

      - name: Cleanup
        run: rm .env
